}
}
samples[i] <- y
}
}
rejection_sampling(dmvnorm, FALSE, 5, 10)
rejection_sampling <- function (f, g, M, m){
g_mu <- c(0,0)
g_sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
samples <- vector('integer', m)
for(i in 1:m){
repeat{
y <- rmvnorm(1, g_mu, g_sigma)
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*dmvnorm(y))) ){
break
}
}
samples[i] <- y
}
}
rejection_sampling(dmvnorm, FALSE, 5, 10)
g_mu <- c(0,0)
g_sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
samples <- vector('integer', m)
y <- rmvnorm(1, g_mu, g_sigma)
u <- runif(1, 0, 1)
u > (f(y)/(M*dmvnorm(y)))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
set.seed(123)
setwd("C:/Users/marko/OneDrive/Desktop/M2/Homework5")
lr_likelihood <- function(y, p) {
return ( (p**y) * ((1-p)**(1 - y)) )
}
p_scenario1 <- function(x){
mu <- c(0,0)
sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
return (dmvnorm(x, mu, sigma))
}
#x are just the fit params
p_scenario3 <- function(x){
df <- read.csv("datset.csv", header = TRUE, sep = ",")
#model  <- glm(y ~ X2, family="binomial", data=df)
#y_pred <- predict(model, data.frame(X2=df[,2]), type="response")
y_pred <- as.matrix(df[,1:2]) %*% x
return (prod(lr_likelihood(df$y, y_pred)))
}
p_scenario4 <- function(x){
df <- read.csv("datset.csv", header = TRUE, sep = ",")
#model  <- glm(y ~ X2+X3+X4+X5+X6+X7+X8+X9+X10+X11, family="binomial", data=df)
#y_pred <- predict(model, df[,2:11], type="response")
y_pred <- as.matrix(df[,1:11]) %*% x
return (prod(lr_likelihood(df$y, y_pred)))
}
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
set.seed(123)
setwd("C:/Users/marko/OneDrive/Desktop/M2/Homework5")
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
den3d <- kde2d(samples[,1], samples[,2])
#persp(den3d, box=FALSE)
plot_ly(x=den3d$x, y=den3d$y, z=den3d$z) %>% add_surface()
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
samples <- rejection_sampling(p_scenario2, envelope_multi_norm, envelope_multi_norm_sampler, 1, 100)
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
samples <- rejection_sampling(p_scenario2, envelope_multi_norm, envelope_multi_norm_sampler, 1, 100)
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (rmvnorm(1, g_mu, g_sigma))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
samples <- rejection_sampling(p_scenario3, envelope_multi_norm, envelope_multi_norm_sampler, 1, 100)
df <- read.csv("datset.csv", header = TRUE, sep = ",")
as.matrix(df[,1:2])
as.matrix(df[,1:2]) %*% c(1,0)
p_scenario1 <- function(x){
mu <- c(0,0)
sigma <- matrix(c(1, 0, 0, 1), ncol = 2)
return (dmvnorm(x, mu, sigma))
}
#x are just the fit params
p_scenario3 <- function(x){
df <- read.csv("datset.csv", header = TRUE, sep = ",")
#model  <- glm(y ~ X2, family="binomial", data=df)
#y_pred <- predict(model, data.frame(X2=df[,2]), type="response")
y_pred <- as.matrix(df[,1:2]) %*% x
return (prod(lr_likelihood(df$y, y_pred)))
}
p_scenario4 <- function(x){
df <- read.csv("datset.csv", header = TRUE, sep = ",")
#model  <- glm(y ~ X2+X3+X4+X5+X6+X7+X8+X9+X10+X11, family="binomial", data=df)
#y_pred <- predict(model, df[,2:11], type="response")
y_pred <- as.matrix(df[,1:11]) %*% x
return (prod(lr_likelihood(df$y, y_pred)))
}
envelope_multi_norm_sampler(2)
c(envelope_multi_norm_sampler(2))
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (c(rmvnorm(1, g_mu, g_sigma)))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
samples <- rejection_sampling(p_scenario3, envelope_multi_norm, envelope_multi_norm_sampler, 1, 100)
den3d <- kde2d(samples[,1], samples[,2])
#persp(den3d, box=FALSE)
plot_ly(x=den3d$x, y=den3d$y, z=den3d$z) %>% add_surface()
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (c(rmvnorm(1, g_mu, g_sigma)))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
samples <- rejection_sampling(p_scenario3, envelope_multi_norm, envelope_multi_norm_sampler, 10, 100)
den3d <- kde2d(samples[,1], samples[,2])
#persp(den3d, box=FALSE)
plot_ly(x=den3d$x, y=den3d$y, z=den3d$z) %>% add_surface()
envelope_multi_norm <- function(x){
return (dmvnorm(x))
}
envelope_multi_norm_sampler <- function(n){
g_mu <- vector('integer', length=n)
g_sigma <- diag(nrow=n)
return (c(rmvnorm(1, g_mu, g_sigma)))
}
envelope_uniform <- function(x){
return (1)
}
envelope_uniform_sampler <- function(n){
return (runif(n, 0, 1))
}
rejection_sampling <- function (f, g, g_sampler, M, m){
samples <- matrix(vector('integer', 2*m), ncol = 2)
for(i in 1:m){
repeat{
y <- g_sampler(2) #2 is the dimension of bivariate
u <- runif(1, 0, 1)
if ( u > (f(y)/(M*g(y))) ){
break
}
}
samples[i,] <- y
}
return (samples)
}
#plot(rejection_sampling(p_scenario1, envelope_uniform, envelope_uniform_sampler, 10, 5000))
#samples <- rejection_sampling(p_scenario1, envelope_multi_norm, envelope_multi_norm_sampler, 5, 10000)
samples <- rejection_sampling(p_scenario3, envelope_multi_norm, envelope_multi_norm_sampler, 10, 10000)
den3d <- kde2d(samples[,1], samples[,2])
#persp(den3d, box=FALSE)
plot_ly(x=den3d$x, y=den3d$y, z=den3d$z) %>% add_surface()
rep(0, 5)
min(1,2)
min(1,10)
a <- matrix(c(1,2,3,4,5,6), ncol=2)
a
a[,-1]
a[-1,]
a[3,]
knitr::opts_chunk$set(echo = TRUE)
HMC = function (U, grad_U, epsilon, L, current_q)
{
q = current_q
p = rnorm(length(q),0,1)  # independent standard normal variates
current_p = p
traj <- NULL
traj <- rbind(traj, data.frame(t(p),t(q), H = U(q)+sum(p^2) / 2))
# Make a half step for momentum at the beginning
p=p-epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (i in 1:L)
{
# Make a full step for the position
q=q+epsilon * p
# Make a full step for the momentum, except at end of trajectory
if (i!=L) p=p-epsilon * grad_U(q)
traj <- rbind(traj, data.frame(t(p),t(q), H = U(q)+sum(p^2) / 2))
}
# Make a half step for momentum at the end.
p=p-epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p=-p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
if (runif(1) < exp(current_U-proposed_U+current_K-proposed_K))
{
return (list(next_q=q, traj = traj))  # accept
}
else
{
return (list(next_q=current_q, traj = traj))  # reject
}
}
B <- 0.05
minus_logf <- function(x) {
-(-(x[1]^2)/200- 0.5 * (x[2]+ B * x[1]^2 - 100*B)^2 )
}
minus_logf_grad <- function(x) {
g1 <- -(x[1])/100- 1.0 * (2* B * x[1]) * (x[2]+ B * x[1]^2 - 100*B)
g2 <- - 1.0 * (x[2]+ B * x[1]^2 - 100*B)
-c(g1,g2)
}
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
library(ggplot2)
library(numDeriv)
library(coda)
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
library(ggplot2)
library(numDeriv)
library(coda)
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
library(ggplot2)
library(numDeriv)
library(coda)
library(grid)
set.seed(123)
setwd("C:/Users/marko/OneDrive/Desktop/M2/Homework5")
B <- 0.05
minus_logf <- function(x) {
-(-(x[1]^2)/200- 0.5 * (x[2]+ B * x[1]^2 - 100*B)^2 )
}
minus_logf_grad <- function(x) {
g1 <- -(x[1])/100- 1.0 * (2* B * x[1]) * (x[2]+ B * x[1]^2 - 100*B)
g2 <- - 1.0 * (x[2]+ B * x[1]^2 - 100*B)
-c(g1,g2)
}
## HMC
L = 27
epsilon = 0.6
current_q = c(0,0)
m = 100
samples <- NULL
for (i in 1:m) {
print(i)
res = HMC(minus_logf, minus_logf_grad, epsilon, L, current_q)
samples = rbind(samples, data.frame(Q1 = res$next_q[1], Q2 = res$next_q[2]))
current_q = res$next_q
if (i > 10) print(m*effectiveSize(samples[,1:2])/i) # monitor effective size of first 3 components
# plot trajectory
if (i %% 20 == 1) {
g1 = ggplot(res$traj,aes(x=X1,y=X2))  + coord_cartesian(ylim=c(-2, 2), xlim=c(-2,2))+ geom_point() +
geom_path() + theme_bw() + xlab("p1") + ylab("p2") +
geom_point(data=res$traj[1,], colour = "red", aes(x=X1,y=X2))
x <- seq(-25,25,0.2)
x0 <- expand.grid(x,x)
y <- apply(x0,1,minus_logf)
df <- data.frame(x0,y = exp(-y))
g2 = ggplot(res$traj,aes(x=X1.1,y=X2.1)) + geom_point() +
geom_path() + theme_bw() + xlab("q1")  + coord_cartesian(xlim=c(-25, 25), ylim=c(-20,10)) + ylab("q2") +
geom_point(data=res$traj[1,], colour = "red", aes(x=X1.1,y=X2.1)) +
geom_contour(data = df, mapping =  aes(Var1, Var2, z = y), alpha = 0.2, colour="black")
g3 = ggplot(res$traj,aes(x=1:nrow(res$traj),y=H)) + geom_point() +
geom_path() + theme_bw() + ylab("H") + xlab("step")
multiplot(g1,g2,g3,cols=3)
}
}
#install.packages("MASS")
#install.packages("plotly")
library("MASS")
library("plotly")
library("mvtnorm")
library(ggplot2)
library(numDeriv)
library(coda)
library(grid)
source("HMC.r")
source("Multiplot.r")
set.seed(123)
setwd("C:/Users/marko/OneDrive/Desktop/M2/Homework5")
B <- 0.05
minus_logf <- function(x) {
-(-(x[1]^2)/200- 0.5 * (x[2]+ B * x[1]^2 - 100*B)^2 )
}
minus_logf_grad <- function(x) {
g1 <- -(x[1])/100- 1.0 * (2* B * x[1]) * (x[2]+ B * x[1]^2 - 100*B)
g2 <- - 1.0 * (x[2]+ B * x[1]^2 - 100*B)
-c(g1,g2)
}
## HMC
L = 27
epsilon = 0.6
current_q = c(0,0)
m = 100
samples <- NULL
for (i in 1:m) {
print(i)
res = HMC(minus_logf, minus_logf_grad, epsilon, L, current_q)
samples = rbind(samples, data.frame(Q1 = res$next_q[1], Q2 = res$next_q[2]))
current_q = res$next_q
if (i > 10) print(m*effectiveSize(samples[,1:2])/i) # monitor effective size of first 3 components
# plot trajectory
if (i %% 20 == 1) {
g1 = ggplot(res$traj,aes(x=X1,y=X2))  + coord_cartesian(ylim=c(-2, 2), xlim=c(-2,2))+ geom_point() +
geom_path() + theme_bw() + xlab("p1") + ylab("p2") +
geom_point(data=res$traj[1,], colour = "red", aes(x=X1,y=X2))
x <- seq(-25,25,0.2)
x0 <- expand.grid(x,x)
y <- apply(x0,1,minus_logf)
df <- data.frame(x0,y = exp(-y))
g2 = ggplot(res$traj,aes(x=X1.1,y=X2.1)) + geom_point() +
geom_path() + theme_bw() + xlab("q1")  + coord_cartesian(xlim=c(-25, 25), ylim=c(-20,10)) + ylab("q2") +
geom_point(data=res$traj[1,], colour = "red", aes(x=X1.1,y=X2.1)) +
geom_contour(data = df, mapping =  aes(Var1, Var2, z = y), alpha = 0.2, colour="black")
g3 = ggplot(res$traj,aes(x=1:nrow(res$traj),y=H)) + geom_point() +
geom_path() + theme_bw() + ylab("H") + xlab("step")
multiplot(g1,g2,g3,cols=3)
}
}
setwd("C:/Users/marko/OneDrive/Desktop/MLDS1/Homework7")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/marko/OneDrive/Desktop/MLDS/Homework7")
setwd("C:/Users/marko/OneDrive/Desktop/MLDS/Homework7")
df <- read.csv("dataset.csv", header = TRUE, sep = ",")
df
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(rstanarm)
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(rstanarm)
